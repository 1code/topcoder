import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

public class Prerequisites
{
 	static final String[] EMPTY_RESULT = new String[0];
	class Course implements Comparable<Course> {
		final String dept;
		final int id;
	
		public Course(String dept, int id) {
			this.dept = dept;
			this.id = id;
		}

		public int compareTo(Course other) {
			if (this.id != other.id) return (this.id - other.id);
			return this.dept.compareTo(other.dept);
		}
		
		@Override
		public boolean equals(Object object) {
			if (this == object) return true;
			if (!(object instanceof Course)) return false;
			Course other = (Course)object;
			return (this.id == other.id) && this.dept.equals(other.dept);
		}
		
		@Override
		public int hashCode() {
    		return 31 * id + dept.hashCode();
  		}
  		
  		@Override
  		public String toString() {
  			return dept + id;
  		}
	}
	
	private boolean dfs(Course start, Map<Course, Set<Course>> white, Set<Course> grey, Set<Course> black, List<String> result) {
		if (grey.contains(start)) {
			if (black.contains(start)) return true;
			return false;
		}
		grey.add(start);
		for (Course end : white.get(start)) {
			if (!dfs(end, white, grey, black, result))
				return false;
		}
		black.add(start);
		result.add(start.toString());
		return true;
	}
	
	private Course getCourse(String input) {	
		Pattern pattern = Pattern.compile("^([A-Z]{3,4})([0-9]{3})$");
		Matcher matcher = pattern.matcher(input);
		if (matcher.find()) {
			String dept = matcher.group(1);
			int id = Integer.parseInt(matcher.group(2));
			return new Course(dept, id);
		}
		return null;
	}
	
	public String[] orderClasses(String[] param0)
	{
		final Map<Course, Set<Course>> graph = new TreeMap<Course, Set<Course>>();
		for (int i = 0; i < param0.length; i++) {
			String[] s1 = param0[i].split(":");
			Course start = getCourse(s1[0]);
			if (start == null) return EMPTY_RESULT;
			Set<Course> ends = new TreeSet<Course>();
			if (s1.length == 2) {
				String[] s2 = s1[1].trim().split(" ");
				for (int j = 0; j < s2.length; j++) {
					Course end = getCourse(s2[j]);
					if (end == null) return EMPTY_RESULT;
					ends.add(end);
				}
			}
			graph.put(start, ends);
		}
		
		for (Course start : graph.keySet()) {
			//System.out.println("===" + start.id + "," + start.dept + "===");
			for (Course end : graph.get(start)) {
				//System.out.println("+++" + end.id + "," + end.dept + "+++");
				if (!graph.keySet().contains(end)) return EMPTY_RESULT;
			}
		}
		
		List<String> result = new ArrayList<String>();
		Set<Course> grey = new HashSet<Course>();
		Set<Course> black = new HashSet<Course>();
		for (Course node : graph.keySet()) {
			if (!dfs(node, graph, grey, black, result)) return EMPTY_RESULT;
		}
		return result.toArray(new String[result.size()]);
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		Prerequisites obj;
		String[] answer;
		obj = new Prerequisites();
		long startTime = System.currentTimeMillis();
		answer = obj.orderClasses(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + p1[i] + "\"");
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + answer[i] + "\"");
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p1[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String[] p1;
		
		// ----- test 0 -----
		p0 = new String[]{"CSE121: CSE110","CSE110:","MATH122:"};
		p1 = new String[]{"CSE110","CSE121","MATH122"};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"ENGL111: ENGL110","ENGL110: ENGL111"};
		p1 = new String[]{};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"ENGL111: ENGL110"};
		p1 = new String[]{};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"CSE258: CSE244 CSE243 INTR100","CSE221: CSE254 INTR100","CSE254: CSE111 MATH210 INTR100","CSE244: CSE243 MATH210 INTR100","MATH210: INTR100","CSE101: INTR100","CSE111: INTR100","ECE201: CSE111 INTR100","ECE111: INTR100","CSE243: CSE254","INTR100:"};
		p1 = new String[]{"INTR100","CSE101","CSE111","ECE111","ECE201","MATH210","CSE254","CSE221","CSE243","CSE244","CSE258"};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
